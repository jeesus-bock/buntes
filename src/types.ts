import { StringModule } from '@faker-js/faker';
import { ColumnType, Generated, Insertable, Selectable, Updateable } from 'kysely';

export interface Database {
  post: PostTable;
  comment: CommentTable;
  species: SpeciesTable;
  user: UserTable;
}

export interface PostTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;

  content: string;
  user_id: number;

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  edit: string | null;

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  created_at: ColumnType<Date, string | undefined, never>;
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
export type Post = Selectable<PostTable>;
export type NewPost = Insertable<PostTable>;
export type PostUpdate = Updateable<PostTable>;

export interface CommentTable {
  id: Generated<number>;
  user_id: number;
  content: string;
  post_id: number;
  parent_comment_id: number | null;
  species_id: number | null;
  created_at: Date;
}

export type Comment = Selectable<CommentTable>;
export type NewComment = Insertable<CommentTable>;
export type CommentUpdate = Updateable<CommentTable>;

export interface SpeciesTable {
  id: Generated<number>;
  name: string;
}
export type Species = Selectable<SpeciesTable>;
export type NewSpecies = Insertable<SpeciesTable>;
export type SpeciesUpdate = Updateable<SpeciesTable>;

export interface UserTable {
  id: Generated<number>;
  user_name: string;
}
export type User = Selectable<UserTable>;
export type NewUser = Insertable<UserTable>;
export type UserUpdate = Updateable<UserTable>;
